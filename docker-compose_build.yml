version: "3.8"

services:
  prometheus:
   image: prom/prometheus:v2.38.0
   container_name: prometheus
   volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml
   ports:
    - "9090:9090"
   networks:
    - networkmysql

  grafana:
   image: grafana/grafana:8.4.0
   container_name: grafana
   environment:
    GF_SECURITY_ADMIN_PASSWORD: admin  # Set the Grafana admin password
   ports:
    - "3000:3000"
   networks:
    - networkmysql
   depends_on:
    - prometheus
  # MySQL Database
  mysql:
    image: mysql:latest
    container_name: mysql
    networks:
      - networkmysql
    ports:
      - "3306:3306"  # Expose MySQL on port 3306
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: rest_db
    volumes:
      - mysql-data:/var/lib/mysql # Persist MySQL data
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping" ]  # Command to check if MySQL is healthy
      interval: 10s  # Interval between health checks
      retries: 5  # Number of retries before considering the service unhealthy
      start_period: 30s  # Initial delay before starting health checks
      timeout: 10s  # Timeout for each health check

  # Redis Service
  redis:
    image: redis:latest
    container_name: redis
    networks:
      - networkmysql
    ports:
      - "6379:6379" # Expose Redis on port 6379
    healthcheck:
     test: [ "CMD", "redis-cli", "ping" ]  # Command to check if Redis is healthy
     interval: 5s  # Interval between health checks
     retries: 3  # Number of retries before considering the service unhealthy
     timeout: 5s  # Timeout for each health check
    
  # Spring Boot backend
  rest-backend:
    build:
      context: ./docker-backend-repo
      dockerfile: Dockerfile
    container_name: restContainer
    networks:
      - networkmysql
    ports:
      - "8383:8383" # Expose Spring Boot on port 8080
    depends_on:  # wait for running below container
     mysql: # web-app depends on db-service to be healthy
      condition: service_healthy  # Waits until db-service is healthy
     redis: # web-app depends on db-service to be healthy
       condition: service_healthy  # Waits until db-service is healthy
    environment:
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DB_NAME: rest_db
      MYSQL_USER: root
    environment:
      MYSQL_HOST: ${MYSQL_HOST}  # Host for MySQL
      MYSQL_PORT: ${MYSQL_PORT}   # Port Number of MySQL
      MYSQL_DB_NAME: ${MYSQL_DB_NAME}  # Datbase name of MySQL
      MYSQL_USER: ${MYSQL_USER}     # MySQL username
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}   # Password for the MySQL user

  # Spring Boot frontend
  ui-application:
    build:
      context: ./docker-frontend-repo
      dockerfile: Dockerfile
    container_name: uiContainer
    networks:
      - networkmysql
    ports:
      - "8484:8484"   # Expose the frontend on port 80
    depends_on:
      - rest-backend

# Define a volume for persisting MySQL data
volumes:
  mysql-data:
    driver: local

# Define the network for communication between services
networks:
  networkmysql:
